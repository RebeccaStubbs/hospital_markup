rbind(list(results,results1,results12))
rbindlist(list(results,results1,results12))
print(paste0("Working on ",adr," out of ",nrow(unique_facilities)))
address_list<-list()
address_list<-c(address_list,results)
address_list
address_list<-c(address_list,results)
for (adr in 1:nrow(unique_facilities)){ # For each full address
print(paste0("Working on ",adr," out of ",nrow(unique_facilities)))
address<-unique_facilities$full_address[adr]
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
address_list<-c(address_list,results)
}
address_list
rbindlist(address_list)
address_list<-c()
address_list<-c(address_list,results)
address_list<-c(address_list,results)
address_list<-c(address_list,results)
address_list<-c(address_list,results)
address_list
rbindlist(address_list)
address_list<-c()
address_list<-c(address_list,results)
address_list<-c(address_list,results)
rbindlist(address_list)
address_list<-rbind(address_list,results)
address_list<-list()
address_list[[adr]]<-results
address_list[[3]]<-results
address_list
rbindlist(address_list)
unique_facilities[:5]
unique_facilities[,:5]
unique_facilities[1:5]
address_list<-list()
for (adr in 1:nrow(unique_facilities[1:5])){ # For each full address
print(paste0("Working on ",adr," out of ",nrow(unique_facilities)))
address<-unique_facilities$full_address[adr]
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
address_list[[adr]]<-results
}
geocoded_addresses<-rbindlist(address_list)
View(geocoded_addresses)
library(foreach)
geocoded_addresses<-foreach(address = unique_facilities$full_address[1:3], .combine='rbind', .packages="data.table") %dopar% {
address<-unique_facilities$full_address[adr]
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
results
}
geocoded_addresses
unique_facilities$full_address[1:3]
foreach_results<-foreach(address = unique_facilities$full_address[1:3], .combine='rbind', .packages="data.table") %dopar% {
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
results
}
View(foreach_results)
# Purpose: Geocode unique facility addresses down to latutide and longitude
# Author: Rebecca Stubbs
# Date: 1/25/2017
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
library(foreach)  # this library allows for parallelization
rm(list=ls())
# Main directory
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
unique_facilities<-fread(paste0(files_dir,"/data_clean/unique_facilities.csv"))
# Geocoding addresses!
key <- "AIzaSyDYDOZ3L1xhw9YpK3Vxf4RgLGAyAp3wwIc"# Project's API key
geocoded_addresses<-foreach(address = unique_facilities$full_address[1:10], .combine='rbind', .packages="data.table") %dopar% {
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
results
}
View(geocoded_addresses)
?foreach
# Purpose: Geocode unique facility addresses down to latutide and longitude
# Author: Rebecca Stubbs
# Date: 1/25/2017
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
library(foreach)  # this library allows for parallelization
rm(list=ls())
# Main directory
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
unique_facilities<-fread(paste0(files_dir,"/data_clean/unique_facilities.csv"))
# Geocoding addresses!
key <- "AIzaSyDYDOZ3L1xhw9YpK3Vxf4RgLGAyAp3wwIc"# Project's API key
geocoded_addresses<-foreach(address = unique_facilities$full_address, .combine='rbind', .packages="data.table") %dopar% {
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
results
}
fwrite(geocoded_addresses,file=paste0(files_dir,"/data_clean/geocoded_facilities.csv"))
fwrite(geocoded_addresses,file=paste0(files_dir,"/data_clean/geocoded_facilities.csv"))
##########################################################
# Author: Rebecca Stubbs
# Purpose: Combine and Clean raw medicare data files
# Date: Nov 11, 2016
#########################################################
library(data.table)
library(woodson)
library(ggplot2)
library(ggthemes)
library(ggmap)
rm(list=ls())
# Load in useful functions
source("C:/Users/stubbsrw/Documents/us_counties_stubbs_gitrepo/r_shared/check_data.R")
# Load in raw data files
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
# Reading in Inpatient Files
inpatient_dir<-paste0(files_dir,"/data_raw/inpatient_charges/")
raw_11<-fread(paste0(inpatient_dir,"Medicare_Provider_Charge_Inpatient_DRG100_FY2011.csv")); raw_11[,year:=2011] # 2011-2013 has inpatient data for top 100 DRGs
raw_12<-fread(paste0(inpatient_dir,"Medicare_Provider_Charge_Inpatient_DRG100_FY2012.csv")); raw_12[,year:=2012]
raw_13<-fread(paste0(inpatient_dir,"Medicare_Provider_Charge_Inpatient_DRG100_FY2013.csv")); raw_13[,year:=2013]
raw_14<-fread(paste0(inpatient_dir,"Medicare_Provider_Charge_Inpatient_DRGALL_FY2014.csv")); raw_14[,year:=2014] # 2014 has data on inpatient charges for ALL DRGs
raw<-rbind(raw_11,raw_12,raw_13,raw_14); rm(raw_11,raw_12,raw_13,raw_14)
names(raw)<-c("drg", # Disease reporting group
"prov_id", # Provider ID
"prov_name", # Hospital name
"prov_street", # Provider Street address
"prov_city",
"prov_state",
"prov_zip",
"hrr", # Hospital referral region (HRR)
"n_discharge", # Total number of discharges from that hospital in that year from that code
"charges", # the average covered charges for that DRG in that year, at that facility
"payments", # the average total amount paid for that DRG in that year, at that facility
"medicare_payments", # What was paid by medicare, on average, for that DRG in that year, at that facility
"year")
# Eliminate any rows that aren't unique-- there are currently 4147 rows with just NA values.
raw<-unique(raw); raw<-copy(raw[is.na(prov_id)==F,])
# Creating a file of only unique locations and names to geocode
unique_facilities<-unique(raw[,list(prov_id,prov_name,prov_street,prov_city,prov_state,prov_zip)])
unique_facilities[,full_address:=paste0(prov_street," ",prov_city," ",prov_state," ",prov_zip)]
fwrite(unique_facilities,file=paste0(files_dir,"/data_clean/unique_facilities.csv"))
# Geocoding from Google's API
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
library(foreach)  # this library allows for parallelization
# Purpose: Geocode unique facility addresses down to latutide and longitude
# Author: Rebecca Stubbs
# Date: 1/25/2017
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
library(foreach)  # this library allows for parallelization
rm(list=ls())
# Main directory
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
unique_facilities<-fread(paste0(files_dir,"/data_clean/unique_facilities.csv"))
# Purpose: Geocode unique facility addresses down to latutide and longitude
# Author: Rebecca Stubbs
# Date: 1/25/2017
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
rm(list=ls())
# Main directory
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
# Loading unique facilities
unique_facilities<-fread(paste0(files_dir,"/data_clean/unique_facilities.csv"))
# My unique Google project API key
key <- "AIzaSyDYDOZ3L1xhw9YpK3Vxf4RgLGAyAp3wwIc"
address_list<-rbindlist()
for (adr in 1:nrow(unique_facilities[1:5])){ # For each full address
print(paste0("Working on ",adr," out of ",nrow(unique_facilities)))
address<-unique_facilities$full_address[adr]
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
address_list[[adr]]<-results
}
geocoded_addresses<-rbindlist(address_list,fill=T)
address_list<-list()
for (adr in 1:nrow(unique_facilities[1:5])){ # For each full address
print(paste0("Working on ",adr," out of ",nrow(unique_facilities)))
address<-unique_facilities$full_address[adr]
google_results<-google_geocode(address = address, key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(address,latitude,longitude,geocode=type)
address_list[[adr]]<-results
}
geocoded_addresses<-rbindlist(address_list,fill=T)
geocoded_addresses<-list()
for (i in 1:5){
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],address,latitude,longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(address_list,fill=T)
View(geocoded_addresses)
View(geocoded_addresses)
results
geocoded_addresses<-list()
geocoded_addresses<-list()
for (i in 1:5){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],address,latitude,longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(address_list,fill=T)
View(geocoded_addresses)
geocoded_addresses<-list()
for (i in 1:5){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=address,LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(address_list,fill=T)
View(geocoded_addresses)
geocoded_addresses<-list()
for (i in 1:5){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1]
longitude<-google_results$results$geometry$location[2]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=address,LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(geocoded_addresses,fill=T)
View(geocoded_addresses)
latitude
latitude[1]
unlist(latitude)
names(latitude)
latitude[["lat"]]
type
geocoded_addresses<-list()
for (i in 1:5){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lon"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=address,LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(geocoded_addresses,fill=T)
latitude
longitude
View(geocoded_addresses)
longitude<-google_results$results$geometry$location[2]
longitude
geocoded_addresses<-list()
for (i in 1:5){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=address,LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(geocoded_addresses,fill=T)
View(geocoded_addresses)
View(geocoded_addresses)
geocoded_addresses<-list()
for (i in 1:5){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(geocoded_addresses,fill=T)
View(geocoded_addresses)
geocoded_addresses<-list()
for (i in 541){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
geocoded_addresses<-rbindlist(geocoded_addresses,fill=T)
type
results
print(i)
i
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
google_results
unique_facilities$full_address[i]
google_results$status
if(google_results$status)=="ZERO_RESULTS"{print("That one didn't wokr")}
if(google_results$status=="ZERO_RESULTS"){print("That one didn't wokr")}
Purpose: Geocode unique facility addresses down to latutide and longitude
# Author: Rebecca Stubbs
# Date: 1/25/2017
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
rm(list=ls())
# Main directory
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
# Loading unique facilities
unique_facilities<-fread(paste0(files_dir,"/data_clean/unique_facilities.csv"))
# My unique Google project API key
key <- "AIzaSyDYDOZ3L1xhw9YpK3Vxf4RgLGAyAp3wwIc"
geocoded_addresses<-list()
for (i in 1:2000){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
if(google_results$status=="ZERO_RESULTS"){
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=NA,LON=NA,geocode=NA)
geocoded_addresses[[i]]<-results
}else{
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
}
geocoded_addresses<-list()
for (i in 539:543){
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
if(google_results$status=="ZERO_RESULTS"){
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=NA,LON=NA,geocode=NA)
geocoded_addresses[[i]]<-results
}else{
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
geocoded_addresses[[i]]<-results
}
}
geocoded_addresses<-rbindlist(geocoded_addresses,fill=T)
View(geocoded_addresses)
geocoded_addresses<-foreach(i = 539:545, .combine='rbind', .packages="data.table") %dopar% {
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
if(google_results$status=="ZERO_RESULTS"){
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=NA,LON=NA,geocode=NA)
results
}else{
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
results
}
}
View(geocoded_addresses)
# Purpose: Geocode unique facility addresses down to latutide and longitude
# Author: Rebecca Stubbs
# Date: 1/25/2017
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
rm(list=ls())
# Main directory
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
# Loading unique facilities
unique_facilities<-fread(paste0(files_dir,"/data_clean/unique_facilities.csv"))
# My unique Google project API key
key <- "AIzaSyDYDOZ3L1xhw9YpK3Vxf4RgLGAyAp3wwIc"
geocoded_addresses<-foreach(i = 1:nrow(unique_facilities), .combine='rbind', .packages="data.table") %dopar% {
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
if(google_results$status=="ZERO_RESULTS"){
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=NA,LON=NA,geocode=NA)
results
}else{
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
results
}
}
library(doParallel)
# Purpose: Geocode unique facility addresses down to latutide and longitude
# Author: Rebecca Stubbs
# Date: 1/25/2017
library(googleway) # this library allows for pulling detailed information from Google's Geocoding API, using a specific API key,
# which gets around daily limits by paying a nominal fee ($.50 per extra 1000 in excess of 2,500 per day)
library(foreach)
library(doParallel)
rm(list=ls())
# Main directory
files_dir<-"C:/Users/stubbsrw/Documents/thesis_files/"
# Loading unique facilities
unique_facilities<-fread(paste0(files_dir,"/data_clean/unique_facilities.csv"))
# My unique Google project API key
key <- "AIzaSyDYDOZ3L1xhw9YpK3Vxf4RgLGAyAp3wwIc"
cl <- makeCluster(5)
registerDoParallel(cl)
geocoded_addresses<-foreach(i = 1:10, .combine='rbind', .packages="data.table") %dopar% {
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
if(google_results$status=="ZERO_RESULTS"){
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=NA,LON=NA,geocode=NA)
results
}else{
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
results
}
}
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(5)
registerDoParallel(cl)
lirbary(googleway)
geocoded_addresses<-foreach(i = 1:10, .combine='rbind', .packages="data.table") %dopar% {
print(i)
google_results<-google_geocode(address = unique_facilities$full_address[i], key = key)
if(google_results$status=="ZERO_RESULTS"){
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=NA,LON=NA,geocode=NA)
results
}else{
# Querying the results from the geocode
latitude<-google_results$results$geometry$location[1][["lat"]]
longitude<-google_results$results$geometry$location[2][["lng"]]
type<-google_results$results$geometry$location_type
# Making a data.table of the results, adding to the list.
results<-data.table(prov_id=unique_facilities$prov_id[i],ADR=unique_facilities$full_address[i],LAT=latitude,LON=longitude,geocode=type)
results
}
}
stopCluster(cl)
results
cut(nrow(unique_facilities),3)
nrow(unique_facilities)[1]
cut(nrow(unique_facilities),100)
4242/100
rm(list=ls())
